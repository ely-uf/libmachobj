#ifndef __MACHOBJ_LOAD_COMMANDS_H
# define __MACHOBJ_LOAD_COMMANDS_H

# include "machobj.h"

# define LC_NAME(_lc) [_lc & LC_REQ_DYLD ? _lc & ~LC_REQ_DYLD : _lc] = #_lc

static const char *lc_names[] = {
    LC_NAME(LC_SEGMENT),
    LC_NAME(LC_SYMTAB),
    LC_NAME(LC_SYMSEG),
    LC_NAME(LC_THREAD),
    LC_NAME(LC_UNIXTHREAD),
    LC_NAME(LC_LOADFVMLIB),
    LC_NAME(LC_IDFVMLIB),
    LC_NAME(LC_IDENT),
    LC_NAME(LC_FVMFILE),
    LC_NAME(LC_PREPAGE),
    LC_NAME(LC_DYSYMTAB),
    LC_NAME(LC_LOAD_DYLIB),
    LC_NAME(LC_ID_DYLIB),
    LC_NAME(LC_LOAD_DYLINKER),
    LC_NAME(LC_ID_DYLINKER),
    LC_NAME(LC_PREBOUND_DYLIB),
    LC_NAME(LC_ROUTINES),
    LC_NAME(LC_SUB_FRAMEWORK),
    LC_NAME(LC_SUB_UMBRELLA),
    LC_NAME(LC_SUB_CLIENT),
    LC_NAME(LC_SUB_LIBRARY),
    LC_NAME(LC_TWOLEVEL_HINTS),
    LC_NAME(LC_PREBIND_CKSUM),
    LC_NAME(LC_LOAD_WEAK_DYLIB),

    LC_NAME(LC_SEGMENT_64),
    LC_NAME(LC_ROUTINES_64),
    LC_NAME(LC_UUID),
    LC_NAME(LC_RPATH),
    LC_NAME(LC_CODE_SIGNATURE),
    LC_NAME(LC_SEGMENT_SPLIT_INFO),
    LC_NAME(LC_REEXPORT_DYLIB),
    LC_NAME(LC_LAZY_LOAD_DYLIB),
    LC_NAME(LC_ENCRYPTION_INFO),
    LC_NAME(LC_DYLD_INFO),
# if 0
    LC_NAME(LC_DYLD_INFO_ONLY),
# endif
    LC_NAME(LC_VERSION_MIN_MACOSX),
    LC_NAME(LC_VERSION_MIN_IPHONEOS),
    LC_NAME(LC_FUNCTION_STARTS),
    LC_NAME(LC_DYLD_ENVIRONMENT),
    LC_NAME(LC_MAIN),
    LC_NAME(LC_DATA_IN_CODE),
    LC_NAME(LC_SOURCE_VERSION),
    LC_NAME(LC_DYLIB_CODE_SIGN_DRS),
    LC_NAME(LC_ENCRYPTION_INFO_64),
    LC_NAME(LC_LINKER_OPTION),
    LC_NAME(LC_LINKER_OPTIMIZATION_HINT),
    LC_NAME(LC_VERSION_MIN_TVOS),
    LC_NAME(LC_VERSION_MIN_WATCHOS),
    LC_NAME(LC_NOTE),
    LC_NAME(LC_BUILD_VERSION)
};

/*
**  Do not free.
*/
t_lc        *machobj_load_commands_get(t_machobj *mach, uint32_t *ncmds);
int         machobj_load_commands_parse(t_machobj *mach);

#endif
